import{_ as a}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as l,c as s,a as e,b as n,e as r,d as o,r as i}from"./app.7cdf671b.js";const p={},d=o('<h1 id="域名里有哪些门道" tabindex="-1"><a class="header-anchor" href="#域名里有哪些门道" aria-hidden="true">#</a> 域名里有哪些门道？</h1><p>IP 协议的职责是「网际互连」，它在 MAC 层之上，使用 IP 地址把 MAC 编号转换成了四位数字，这就对物理网卡的 MAC 地址做了一层抽象，发展出了许多的「新玩法」。</p><p>例如，分为 A、B、C、D、E 五种类型，公有地址和私有地址，掩码分割子网等。只要每个小网络在 IP 地址这个概念上达成一致，不管它在 MAC 层有多大的差异，都可以接入 TCP/IP 协议栈，最终汇合进整个互联网。</p><p>但接入互联网的计算机越来越多，IP 地址的缺点也就暴露出来了，最主要的是它「对人不友好」，虽然比 MAC 的 16 进制数要好一点，但还是难于记忆和输入。</p><p>怎么解决这个问题呢？</p><p>那就「以其人之道还治其人之身」，在 IP 地址之上再来一次抽象，把数字形式的 IP 地址转换成更有意义更好记的名字，在字符串的层面上再增加「新玩法」。于是，DNS 域名系统就这么出现了。</p><h2 id="域名的形式" tabindex="-1"><a class="header-anchor" href="#域名的形式" aria-hidden="true">#</a> 域名的形式</h2><p>域名是一个有层次的结构，是一串用「.」分隔的多个单词，最右边的被称为「顶级域名」，然后是「二级域名」，层级关系向左依次降低。</p><p>最左边的是主机名，通常用来表明主机的用途，比如「www」表示提供万维网服务、「mail」表示提供邮件服务，不过这也不是绝对的，名字的关键是要让我们容易记忆。</p>',9),c={href:"http://time.geekbang.org",target:"_blank",rel:"noopener noreferrer"},_=o(`<p>域名不仅能够代替 IP 地址，还有许多其他的用途。</p><p>在 Apache、Nginx 这样的 Web 服务器里，域名可以用来标识虚拟主机，决定由哪个虚拟主机来对外提供服务，比如在 Nginx 里就会使用「server_name」指令：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>server {
    listen 80;                       #监听80端口
    server_name  time.geekbang.org;  #主机名是time.geekbang.org
    ...
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>域名本质上还是个名字空间系统，使用多级域名就可以划分出不同的国家、地区、组织、公司、部门，每个域名都是独一无二的，可以作为一种身份的标识。</p><p>举个例子吧，假设 A 公司里有个小明，B 公司里有个小强，于是他们就可以分别说是「小明.A 公司」，「小强.B 公司」，即使 B 公司里也有个小明也不怕，可以标记为「小明.B 公司」，很好地解决了重名问题。</p><p>因为这个特性，域名也被扩展到了其他应用领域，比如 Java 的包机制就采用域名作为命名空间，只是它使用了反序。如果极客时间要开发 Java 应用，那么它的包名可能就是「org.geekbang.time」。</p><p>而 XML 里使用 URI 作为名字空间，也是间接使用了域名。</p><h2 id="域名的解析" tabindex="-1"><a class="header-anchor" href="#域名的解析" aria-hidden="true">#</a> 域名的解析</h2><p>就像 IP 地址必须转换成 MAC 地址才能访问主机一样，域名也必须要转换成 IP 地址，这个过程就是「域名解析」。</p><p>目前全世界有几亿个站点，有几十亿网民，而每天网络上发生的 HTTP 流量更是天文数字。这些请求绝大多数都是基于域名来访问网站的，所以 DNS 就成了互联网的重要基础设施，必须要保证域名解析稳定可靠、快速高效。</p><p>DNS 的核心系统是一个三层的树状、分布式服务，基本对应域名的结构：</p>`,11),h=e("li",null,"根域名服务器（Root DNS Server）：管理顶级域名服务器，返回「com」「net」「cn」等顶级域名服务器的 IP 地址",-1),u={href:"http://apple.com",target:"_blank",rel:"noopener noreferrer"},g={href:"http://apple.com",target:"_blank",rel:"noopener noreferrer"},m={href:"http://www.apple.com",target:"_blank",rel:"noopener noreferrer"},b=e("img",{src:"https://static001.geekbang.org/resource/image/6b/f2/6b020454987543efdd1cf6ddec784bf2.png",alt:"img",style:{zoom:"25%"}},null,-1),v=e("p",null,"在这里根域名服务器是关键，它必须是众所周知的，否则下面的各级服务器就无从谈起了。目前全世界共有 13 组根域名服务器，又有数百台的镜像，保证一定能够被访问到。",-1),N=e("p",null,"有了这个系统以后，任何一个域名都可以在这个树形结构里从顶至下进行查询，就好像是把域名从右到左顺序走了一遍，最终就获得了域名对应的 IP 地址。",-1),S=e("p",null,"虽然核心的 DNS 系统遍布全球，服务能力很强也很稳定，但如果全世界的网民都往这个系统里挤，即使不挤瘫痪了，访问速度也会很慢。",-1),f=e("p",null,"所以在核心 DNS 系统之外，还有两种手段用来减轻域名解析的压力，并且能够更快地获取结果，基本思路就是「缓存」。",-1),D=e("p",null,"首先，许多大公司、网络运行商都会建立自己的 DNS 服务器，作为用户 DNS 查询的代理，代替用户访问核心 DNS 系统。这些「野生」服务器被称为「非权威域名服务器」，可以缓存之前的查询结果，如果已经有了记录，就无需再向根服务器发起查询，直接返回对应的 IP 地址。",-1),I=e("p",null,"这些 DNS 服务器的数量要比核心系统的服务器多很多，而且大多部署在离用户很近的地方。比较知名的 DNS 有 Google 的「8.8.8.8」，Microsoft 的「4.2.2.1」，还有 CloudFlare 的「1.1.1.1」等等。",-1),P={href:"http://www.apple.com",target:"_blank",rel:"noopener noreferrer"},x=o(`<p>另外，操作系统里还有一个特殊的「主机映射」文件，通常是一个可编辑的文本，在 Linux 里是「/etc/hosts」，在 Windows 里是「C:\\WINDOWS\\system32\\drivers\\etc\\hosts」，如果操作系统在缓存里找不到 DNS 记录，就会找这个文件。</p><p>有了上面的「野生」DNS 服务器、操作系统缓存和 hosts 文件后，很多域名解析的工作就都不用「跋山涉水」了，直接在本地或本机就能解决，不仅方便了用户，也减轻了各级 DNS 服务器的压力，效率就大大提升了。</p><p>下面的这张图比较完整地表示了现在的 DNS 架构。</p><img src="http://dean-imgsubmit.oss-cn-beijing.aliyuncs.com/img/e51df3245609880641043af65bba94ac.png" alt="img" style="zoom:25%;"><p>在 Nginx 里有这么一条配置指令「resolver」，它就是用来配置 DNS 服务器的，如果没有它，那么 Nginx 就无法查询域名对应的 IP，也就无法反向代理到外部的网站。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>resolver 8.8.8.8 valid=30s;  #指定Google的DNS，缓存30秒
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="域名的新玩法" tabindex="-1"><a class="header-anchor" href="#域名的新玩法" aria-hidden="true">#</a> 域名的新玩法</h2><p>有了域名，又有了可以稳定工作的解析系统，于是我们就可以实现比 IP 地址更多的「新玩法」了。</p><p>第一种，也是最简单的，「重定向」。因为域名代替了 IP 地址，所以可以让对外服务的域名不变，而主机的 IP 地址任意变动。当主机有情况需要下线、迁移时，可以更改 DNS 记录，让域名指向其他的机器。</p>`,9),k={href:"http://buy.tv",target:"_blank",rel:"noopener noreferrer"},w={href:"http://buy.tv",target:"_blank",rel:"noopener noreferrer"},A={href:"http://buy.tv",target:"_blank",rel:"noopener noreferrer"},y=e("p",null,"第二种，因为域名是一个名字空间，所以可以使用 bind9 等开源软件搭建一个在内部使用的 DNS，作为名字服务器。这样我们开发的各种内部服务就都用域名来标记，比如数据库服务都用域名「mysql.inner.app」，商品服务都用「goods.inner.app」，发起网络通信时也就不必再使用写死的 IP 地址了，可以直接用域名，而且这种方式也兼具了第一种「玩法」的优势。",-1),C=e("p",null,"第三种「玩法」包含了前两种，也就是基于域名实现的负载均衡。",-1),B=e("p",null,"这种「玩法」也有两种方式，两种方式可以混用。",-1),M=e("p",null,"第一种方式，因为域名解析可以返回多个 IP 地址，所以一个域名可以对应多台主机，客户端收到多个 IP 地址后，就可以自己使用轮询算法依次向服务器发起请求，实现负载均衡。",-1),T=e("p",null,"第二种方式，域名解析可以配置内部的策略，返回离客户端最近的主机，或者返回当前服务质量最好的主机，这样在 DNS 端把请求分发到不同的服务器，实现负载均衡。",-1),E=e("p",null,"前面我们说的都是可信的 DNS，如果有一些不怀好意的 DNS，那么它也可以在域名这方面「做手脚」，弄一些比较「恶意」的「玩法」，举两个例子：",-1),L=e("ul",null,[e("li",null,"「域名屏蔽」，对域名直接不解析，返回错误，让你无法拿到 IP 地址，也就无法访问网站"),e("li",null,"「域名劫持」，也叫「域名污染」，你要访问 A 网站，但 DNS 给了你 B 网站。")],-1),V=e("p",null,"好在互联网上还是好人多，而且 DNS 又是互联网的基础设施，这些「恶意 DNS」并不多见，你上网的时候不需要太过担心。",-1);function W(z,G){const t=i("ExternalLinkIcon");return l(),s("div",null,[d,e("p",null,[n("看一下极客时间的域名「"),e("a",c,[n("time.geekbang.org"),r(t)]),n("」，这里的「org」就是顶级域名，「geekbang」是二级域名，「time」则是主机名。使用这个域名，DNS 就会把它转换成相应的 IP 地址，你就可以访问极客时间的网站了。")]),_,e("ul",null,[h,e("li",null,[n("顶级域名服务器（Top-level DNS Server）：管理各自域名下的权威域名服务器，比如 com 顶级域名服务器可以返回 "),e("a",u,[n("apple.com"),r(t)]),n(" 域名服务器的 IP 地址")]),e("li",null,[n("权威域名服务器（Authoritative DNS Server）：管理自己域名下主机的 IP 地址，比如 "),e("a",g,[n("apple.com"),r(t)]),n(" 权威域名服务器可以返回 "),e("a",m,[n("www.apple.com"),r(t)]),n(" 的 IP 地址")])]),b,v,N,S,f,D,I,e("p",null,[n("其次，操作系统里也会对 DNS 解析结果做缓存，如果你之前访问过「"),e("a",P,[n("www.apple.com"),r(t)]),n("」，那么下一次在浏览器里再输入这个网址的时候就不会再跑到 DNS 那里去问了，直接在操作系统里就可以拿到 IP 地址。")]),x,e("p",null,[n("比如，你有一台「"),e("a",k,[n("buy.tv"),r(t)]),n("」的服务器要临时停机维护，那你就可以通知 DNS 服务器：「我这个 "),e("a",w,[n("buy.tv"),r(t)]),n(" 域名的地址变了啊，原先是 1.2.3.4，现在是 5.6.7.8，麻烦你改一下。」DNS 于是就修改内部的 IP 地址映射关系，之后再有访问 "),e("a",A,[n("buy.tv"),r(t)]),n(" 的请求就不走 1.2.3.4 这台主机，改由 5.6.7.8 来处理，这样就可以保证业务服务不中断。")]),y,C,B,M,T,E,L,V])}const j=a(p,[["render",W],["__file","05-域名里有哪些门道？.html.vue"]]);export{j as default};
