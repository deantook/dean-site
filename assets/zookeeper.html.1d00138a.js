import{_ as n}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as s,c as a,e}from"./app.4816587a.js";const o={},t=e(`<h1 id="zookeeper-核心通识" tabindex="-1"><a class="header-anchor" href="#zookeeper-核心通识" aria-hidden="true">#</a> ZooKeeper 核心通识</h1><p>作者：mosun，腾讯 PCG 后台开发工程师</p><blockquote><p>文章分三部分展开陈述：ZooKeeper 核心知识、ZooKeeper 的典型应用实现原理、ZooKeeper 在中间件的落地案例。</p></blockquote><p>为了应对大流量，现代应用/中间件通常采用分布式部署，此时不得不考虑 CAP 问题。ZooKeeper（后文简称 ZK）是面向 CP 设计的一个开源的<strong>分布式协调框架</strong>，将那些复杂且容易出错的分布式一致性服务封装起来，构成一个高效可靠的原语集，并以一系列简单易用的接口提供给用户使用，分布式应用程序可以基于它实现诸如 <strong>数据发布/订阅、负载均衡、命名服务、集群管理、Master 选举、分布式锁、分布式队列</strong> 等功能。ZK 之所以能够提供上述一套分布式数据一致性解决方案，核心在于其设计精妙的<strong>数据结构、watcher 机制、Zab 一致性协议等</strong>，下面将依次剖析。</p><h2 id="数据结构" tabindex="-1"><a class="header-anchor" href="#数据结构" aria-hidden="true">#</a> <strong>数据结构</strong></h2><p>ZK 在<strong>内存</strong>中维护了一个<strong>类似文件系统的树状数据结构</strong>实现命名空间（如下），树中的节点称为 <strong>znode</strong>。</p><p><img src="http://dean-imgsubmit.oss-cn-beijing.aliyuncs.com/imm/640-20221202234644662.jpeg" alt="图片" loading="lazy"></p><p>然而，znode 要比文件系统的路径复杂，既可以通过路径访问，又可以存储数据。znode 具有四个属性 data、acl、stat、children，如下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataNode</span> <span class="token keyword">implements</span> <span class="token class-name">Record</span> <span class="token punctuation">{</span>
    <span class="token keyword">byte</span> data<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token class-name">Long</span> acl<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">StatPersisted</span> stat<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> children <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>data</strong>: znode 相关的业务数据均存储在这里，但是，<strong>父节点不可存储数据</strong>；</li><li><strong>children</strong>: 存储当前节点的子节点引用信息，因为内存限制，所以 <strong>znode 的子节点数不是无限的</strong>；</li><li><strong>stat</strong>: 包含 znode 节点的状态信息，比如: 事务 id、版本号、时间戳等，<strong>其中事务 id 和 ZK 的数据一直性、选主相关，下面将重点介绍</strong>；</li><li><strong>acl</strong>: 记录客户端对 znode 节点的访问权限；</li></ul><p><strong>注意</strong>：znode 的<strong>数据操作具有原子性</strong>，读操作将获取与节点相关的所有数据，写操作也将替换掉节点的所有数据。<strong>znode 可存储的最大数据量是 1MB</strong> ，但实际上我们在 znode 的数据量应该尽可能小，因为数据过大会导致 zk 的性能明显下降。<strong>每个 ZNode 都对应一个唯一的路径</strong>。</p><h3 id="事物-id-zxid" tabindex="-1"><a class="header-anchor" href="#事物-id-zxid" aria-hidden="true">#</a> 事物 ID：Zxid</h3><p>Zxid 由 Leader 节点生成。当有新写入事件时，Leader 节点生成新的 Zxid，并随提案一起广播。Zxid 的生成规则如下：</p>`,13),r=[t];function p(c,i){return s(),a("div",null,r)}const g=n(o,[["render",p],["__file","zookeeper.html.vue"]]);export{g as default};
