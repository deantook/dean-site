const e=JSON.parse('{"key":"v-31a29ab7","path":"/notes/%E9%AB%98%E5%B9%B6%E5%8F%91%E7%B3%BB%E7%BB%9F%E5%AE%9E%E6%88%98/%E7%BC%93%E5%AD%98%E8%AE%BE%E8%AE%A1/%E7%BC%93%E5%AD%98%E7%9A%84%E4%BD%BF%E7%94%A8.html","title":"缓存的使用","lang":"zh-CN","frontmatter":{"description":"像大部分组件一样，在提供一系列便利性的同时，使用缓存也带来了一定的问题。 增加系统复杂度; 提高运维成本; 引出数据一致性问题; 缓存的读写策略 对于不同的业务场景，需要慎重考虑缓存的读写策略。尤其是在并发的情况下，不合适的读写策略会导致数据不一致的情况。 Cache Aside Pattern Cache Aside Pattern 即旁路缓存策略，...","head":[["meta",{"property":"og:url","content":"https://deantook.top/notes/%E9%AB%98%E5%B9%B6%E5%8F%91%E7%B3%BB%E7%BB%9F%E5%AE%9E%E6%88%98/%E7%BC%93%E5%AD%98%E8%AE%BE%E8%AE%A1/%E7%BC%93%E5%AD%98%E7%9A%84%E4%BD%BF%E7%94%A8.html"}],["meta",{"property":"og:site_name","content":"文澜阁"}],["meta",{"property":"og:title","content":"缓存的使用"}],["meta",{"property":"og:description","content":"像大部分组件一样，在提供一系列便利性的同时，使用缓存也带来了一定的问题。 增加系统复杂度; 提高运维成本; 引出数据一致性问题; 缓存的读写策略 对于不同的业务场景，需要慎重考虑缓存的读写策略。尤其是在并发的情况下，不合适的读写策略会导致数据不一致的情况。 Cache Aside Pattern Cache Aside Pattern 即旁路缓存策略，..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2023-04-08T16:25:07.000Z"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:modified_time","content":"2023-04-08T16:25:07.000Z"}]]},"excerpt":"","headers":[{"level":2,"title":"缓存的读写策略","slug":"缓存的读写策略","link":"#缓存的读写策略","children":[{"level":3,"title":"Cache Aside Pattern","slug":"cache-aside-pattern","link":"#cache-aside-pattern","children":[]}]},{"level":2,"title":"使用多级缓存来提升服务性能","slug":"使用多级缓存来提升服务性能","link":"#使用多级缓存来提升服务性能","children":[]}],"git":{"createdTime":1680971107000,"updatedTime":1680971107000,"contributors":[{"name":"dean","email":"chenyunlong99@outlook.com","commits":1}]},"readingTime":{"minutes":0.52,"words":156},"autoDesc":true,"filePathRelative":"notes/高并发系统实战/缓存设计/缓存的使用.md","localizedDate":"2023年4月8日"}');export{e as data};
