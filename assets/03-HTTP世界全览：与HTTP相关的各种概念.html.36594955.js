import{_ as t}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as T,c as n,a as e,b as p,e as i,d as a,r as o}from"./app.33d80d62.js";const h={},d=a('<h1 id="http世界全览-与http相关的概念与协议" tabindex="-1"><a class="header-anchor" href="#http世界全览-与http相关的概念与协议" aria-hidden="true">#</a> HTTP世界全览：与HTTP相关的概念与协议</h1><h2 id="概念" tabindex="-1"><a class="header-anchor" href="#概念" aria-hidden="true">#</a> 概念</h2><img src="http://dean-imgsubmit.oss-cn-beijing.aliyuncs.com/img/5102fc33d04b59b36971a5e487779864.png" alt="img" style="zoom:33%;"><h3 id="网络世界" tabindex="-1"><a class="header-anchor" href="#网络世界" aria-hidden="true">#</a> 网络世界</h3><p>你一定已经习惯了现在的网络生活，甚至可能会下意识地认为网络世界就应该是这个样子的：「一张平坦而且一望无际的巨大网络，每一台电脑就是网络上的一个节点，均匀地点缀在这张网上」。</p><p>这样的理解既对，又不对。从抽象的、虚拟的层面来看，网络世界确实是这样的，我们可以从一个节点毫无障碍地访问到另一个节点。</p><p>但现实世界的网络却远比这个抽象的模型要复杂得多。实际的互联网是由许许多多个规模略小的网络连接而成的，这些小网络可能是只有几百台电脑的局域网，可能是有几万、几十万台电脑的广域网，可能是用电缆、光纤构成的固定网络，也可能是用基站、热点构成的移动网络……</p><p>互联网世界更像是由数不清的大小岛屿组成的「千岛之国」。</p><p>互联网的正式名称是 Internet，里面存储着无穷无尽的信息资源，我们通常所说的「上网」实际上访问的只是互联网的一个子集<strong>万维网</strong>（World Wide Web），它基于 HTTP 协议，传输 HTML 等超文本资源，能力也就被限制在 HTTP 协议之内。</p><p>互联网上还有许多万维网之外的资源，例如常用的电子邮件、BT 和 Magnet 点对点下载、FTP 文件下载、SSH 安全登录、各种即时通信服务等等，它们需要用各自的专有协议来访问。</p><p>不过由于 HTTP 协议非常灵活、易于扩展，而且超文本的表述能力很强，所以很多其他原本不属于 HTTP 的资源也可以「包装」成 HTTP 来访问，这就是我们为什么能够总看到各种网页应用（例如微信网页版、邮箱网页版）的原因。</p><p>综合起来看，现在的互联网 90% 以上的部分都被万维网，也就是 HTTP 所覆盖，所以把互联网约等于万维网或 HTTP 应该也不算大错。</p><h3 id="浏览器" tabindex="-1"><a class="header-anchor" href="#浏览器" aria-hidden="true">#</a> 浏览器</h3><p>上网就要用到浏览器，常见的浏览器有 Google 的 Chrome、Mozilla 的 Firefox、Apple 的 Safari、Microsoft 的 IE 和 Edge，还有小众的 Opera 以及国内的各种「换壳」的「极速」「安全」浏览器。</p><p><img src="http://dean-imgsubmit.oss-cn-beijing.aliyuncs.com/img/613fffb6defee1735431dc5f89085d8b.png" alt="img" loading="lazy"></p><p>那么你想过没有，所谓的「浏览器」到底是个什么东西呢？</p><p>浏览器的正式名字叫「Web Browser」，顾名思义，就是检索、查看互联网上网页资源的应用程序，名字里的 Web，实际上指的就是「World Wide Web」，也就是万维网。</p><p>浏览器本质上是一个 HTTP 协议中的请求方，使用 HTTP 协议获取网络上的各种资源。当然，为了让我们更好地检索查看网页，它还集成了很多额外的功能。</p><p>例如，HTML 排版引擎用来展示页面，JavaScript 引擎用来实现动态化效果，甚至还有开发者工具用来调试网页，以及五花八门的各种插件和扩展。</p><p>在 HTTP 协议里，浏览器的角色被称为「User Agent」即「用户代理」，意思是作为访问者的「代理」来发起 HTTP 请求。不过在不引起混淆的情况下，我们通常都简单地称之为「客户端」。</p><h3 id="web-服务器" tabindex="-1"><a class="header-anchor" href="#web-服务器" aria-hidden="true">#</a> Web 服务器</h3><p>刚才说的浏览器是 HTTP 里的请求方，那么在协议另一端的应答方（响应方）又是什么呢？</p><p>这个你一定也很熟悉，答案就是服务器，Web Server。</p><p>Web 服务器是一个很大也很重要的概念，它是 HTTP 协议里响应请求的主体，通常也把控着绝大多数的网络资源，在网络世界里处于强势地位。</p><p>当我们谈到「Web 服务器」时有两个层面的含义：硬件和软件。</p><p>硬件含义就是物理形式或「云」形式的机器，在大多数情况下它可能不是一台服务器，而是利用反向代理、负载均衡等技术组成的庞大集群。但从外界看来，它仍然表现为一台机器，但这个形象是「虚拟的」。</p><p>软件含义的 Web 服务器可能我们更为关心，它就是提供 Web 服务的应用程序，通常会运行在硬件含义的服务器上。它利用强大的硬件能力响应海量的客户端 HTTP 请求，处理磁盘上的网页、图片等静态文件，或者把请求转发给后面的 Tomcat、Node.js 等业务应用，返回动态的信息。</p><p>比起层出不穷的各种 Web 浏览器，Web 服务器就要少很多了，一只手的手指头就可以数得过来。</p><p>Apache 是老牌的服务器，到今天已经快 25 年了，功能相当完善，相关的资料很多，学习门槛低，是许多创业者建站的入门产品。</p><p>Nginx 是 Web 服务器里的后起之秀，特点是高性能、高稳定，且易于扩展。自 2004 年推出后就不断蚕食 Apache 的市场份额，在高流量的网站里更是不二之选。</p><p>此外，还有 Windows 上的 IIS、Java 的 Jetty/Tomcat 等，因为性能不是很高，所以在互联网上应用得较少。</p><h3 id="cdn" tabindex="-1"><a class="header-anchor" href="#cdn" aria-hidden="true">#</a> CDN</h3><p>浏览器和服务器是 HTTP 协议的两个端点，那么，在这两者之间还有别的什么东西吗？</p><p>当然有了。浏览器通常不会直接连到服务器，中间会经过「重重关卡」，其中的一个重要角色就叫做 CDN。</p><p>CDN，全称是「Content Delivery Network」，翻译过来就是「内容分发网络」。它应用了 HTTP 协议里的缓存和代理技术，代替源站响应客户端的请求。</p><p>CDN 有什么好处呢？</p><p>简单来说，它可以缓存源站的数据，让浏览器的请求不用「千里迢迢」地到达源站服务器，直接在「半路」就可以获取响应。如果 CDN 的调度算法很优秀，更可以找到离用户最近的节点，大幅度缩短响应时间。</p><p>打个比方，就好像唐僧西天取经，刚出长安城，就看到阿难与迦叶把佛祖的真经递过来了，是不是很省事？</p><p>CDN 也是现在互联网中的一项重要基础设施，除了基本的网络加速外，还提供负载均衡、安全防护、边缘计算、跨运营商网络等功能，能够成倍地「放大」源站服务器的服务能力，很多云服务商都把 CDN 作为产品的一部分。</p><h3 id="爬虫" tabindex="-1"><a class="header-anchor" href="#爬虫" aria-hidden="true">#</a> 爬虫</h3><p>前面说到过浏览器，它是一种用户代理，代替我们访问互联网。</p><p>但 HTTP 协议并没有规定用户代理后面必须是「真正的人类」，它也完全可以是「机器人」，这些「机器人」的正式名称就叫做「爬虫」（Crawler），实际上是一种可以自动访问 Web 资源的应用程序。</p><p>「爬虫」这个名字非常形象，它们就像是一只只不知疲倦的、辛勤的蚂蚁，在无边无际的网络上爬来爬去，不停地在网站间奔走，搜集抓取各种信息。</p><p>据估计，互联网上至少有 50% 的流量都是由爬虫产生的，某些特定领域的比例还会更高，也就是说，如果你的网站今天的访问量是十万，那么里面至少有五六万是爬虫机器人，而不是真实的用户。</p><p>爬虫是怎么来的呢？</p><p>绝大多数是由各大搜索引擎「放」出来的，抓取网页存入庞大的数据库，再建立关键字索引，这样我们才能够在搜索引擎中快速地搜索到互联网角落里的页面。</p><p>爬虫也有不好的一面，它会过度消耗网络资源，占用服务器和带宽，影响网站对真实数据的分析，甚至导致敏感信息泄漏。所以，又出现了「反爬虫」技术，通过各种手段来限制爬虫。其中一项就是「君子协定」robots.txt，约定哪些该爬，哪些不该爬。</p><p>无论是「爬虫」还是「反爬虫」，用到的基本技术都是两个，一个是 HTTP，另一个就是 HTML。</p><h3 id="html-webservice-waf" tabindex="-1"><a class="header-anchor" href="#html-webservice-waf" aria-hidden="true">#</a> HTML/WebService/WAF</h3><p>HTML 是 HTTP 协议传输的主要内容之一，它描述了超文本页面，用各种「标签」定义文字、图片等资源和排版布局，最终由浏览器「渲染」出可视化页面。</p><p>HTML 目前有两个主要的标准，HTML4 和 HTML5。广义上的 HTML 通常是指 HTML、JavaScript、CSS 等前端技术的组合，能够实现比传统静态页面更丰富的动态页面。</p><p>接下来是 Web Service，它的名字与 Web Server 很像，但却是一个完全不同的东西。</p><p>Web Service 是一种由 W3C 定义的应用服务开发规范，使用 client-server 主从架构，通常使用 WSDL 定义服务接口，使用 HTTP 协议传输 XML 或 SOAP 消息，也就是说，它是一个基于 Web（HTTP）的服务架构技术，既可以运行在内网，也可以在适当保护后运行在外网。</p><p>因为采用了 HTTP 协议传输数据，所以在 Web Service 架构里服务器和客户端可以采用不同的操作系统或编程语言开发。例如服务器端用 Linux+Java，客户端用 Windows+C#，具有跨平台跨语言的优点。</p><p>WAF 是近几年比较「火」的一个词，意思是「网络应用防火墙」。与硬件「防火墙」类似，它是应用层面的「防火墙」，专门检测 HTTP 流量，是防护 Web 应用的安全技术。</p><p>WAF 通常位于 Web 服务器之前，可以阻止如 SQL 注入、跨站脚本等攻击，目前应用较多的一个开源项目是 ModSecurity，它能够完全集成进 Apache 或 Nginx。</p><h2 id="协议" tabindex="-1"><a class="header-anchor" href="#协议" aria-hidden="true">#</a> 协议</h2><img src="https://static001.geekbang.org/resource/image/1e/81/1e7533f765d2ede0abfab73cf6b57781.png" alt="img" style="zoom:33%;"><h3 id="tcp-ip" tabindex="-1"><a class="header-anchor" href="#tcp-ip" aria-hidden="true">#</a> TCP/IP</h3><p>TCP/IP 协议是目前网络世界「事实上」的标准通信协议，即使你没有用过也一定听说过，因为它太著名了。</p><p>TCP/IP 协议实际上是一系列网络通信协议的统称，其中最核心的两个协议是 TCP 和 IP，其他的还有 UDP、ICMP、ARP 等等，共同构成了一个复杂但有层次的协议栈。</p><p>这个协议栈有四层，最上层是「应用层」，最下层是「链接层」，TCP 和 IP 则在中间：TCP 属于「传输层」，IP 属于「网际层」，议的层级关系模型非常重要。</p><p>IP 协议是「Internet Protocol」的缩写，主要目的是解决寻址和路由问题，以及如何在两点间传送数据包。IP 协议使用「IP 地址」的概念来定位互联网上的每一台计算机。可以对比一下现实中的电话系统，你拿着的手机相当于互联网上的计算机，而要打电话就必须接入电话网，由通信公司给你分配一个号码，这个号码就相当于 IP 地址。</p><p>现在我们使用的 IP 协议大多数是 v4 版，地址是四个用「.」分隔的数字，例如「192.168.0.1」，总共有 2^32，大约 42 亿个可以分配的地址。看上去好像很多，但互联网的快速发展让地址的分配管理很快就「捉襟见肘」。所以，就又出现了 v6 版，使用 8 组「:」分隔的数字作为地址，容量扩大了很多，有 2^128 个，在未来的几十年里应该是足够用了。</p><p>TCP 协议是「Transmission Control Protocol」的缩写，意思是「传输控制协议」，它位于 IP 协议之上，基于 IP 协议提供可靠的、字节流形式的通信，是 HTTP 协议得以实现的基础。</p><p>「可靠」是指保证数据不丢失，「字节流」是指保证数据完整，所以在 TCP 协议的两端可以如同操作文件一样访问传输的数据，就像是读写在一个密闭的管道里「流动」的字节。</p><p>HTTP 是一个&quot;传输协议&quot;，但它不关心寻址、路由、数据完整性等传输细节，而要求这些工作都由下层来处理。因为互联网上最流行的是 TCP/IP 协议，而它刚好满足 HTTP 的要求，所以互联网上的 HTTP 协议就运行在了 TCP/IP 上，HTTP 也就可以更准确地称为「HTTP over TCP/IP」。</p><h3 id="dns" tabindex="-1"><a class="header-anchor" href="#dns" aria-hidden="true">#</a> DNS</h3><p>在 TCP/IP 协议中使用 IP 地址来标识计算机，数字形式的地址对于计算机来说是方便了，但对于人类来说却既难以记忆又难以输入。</p>',69),P={href:"http://nginx.org",target:"_blank",rel:"noopener noreferrer"},c=a('<p>在 DNS 中，「域名」（Domain Name）又称为「主机名」（Host），为了更好地标记不同国家或组织的主机，让名字更好记，所以被设计成了一个有层次的结构。域名用「.」分隔成多个单词，级别从左到右逐级升高，最右边的被称为「顶级域名」。对于顶级域名，可能你随口就能说出几个，例如表示商业公司的「com」、表示教育机构的「edu」，表示国家的「cn」「uk」等。</p><p>但想要使用 TCP/IP 协议来通信仍然要使用 IP 地址，所以需要把域名做一个转换，「映射」到它的真实 IP，这就是所谓的「域名解析」。</p><p>继续用刚才的打电话做个比喻，你想要打电话给小明，但不知道电话号码，就得在手机里的号码簿里一项一项地找，直到找到小明那一条记录，然后才能查到号码。这里的「小明」就相当于域名，而「电话号码」就相当于 IP 地址，这个查找的过程就是域名解析。</p><p>域名解析的实际操作要比刚才的例子复杂很多，因为互联网上的电脑实在是太多了。目前全世界有 13 组根 DNS 服务器，下面再有许多的顶级 DNS、权威 DNS 和更小的本地 DNS，逐层递归地实现域名查询。</p><p>HTTP 协议中并没有明确要求必须使用 DNS，但实际上为了方便访问互联网上的 Web 服务器，通常都会使用 DNS 来定位或标记主机名，间接地把 DNS 与 HTTP 绑在了一起。</p><h3 id="uri-url" tabindex="-1"><a class="header-anchor" href="#uri-url" aria-hidden="true">#</a> URI/URL</h3><p>有了 TCP/IP 和 DNS，是不是我们就可以任意访问网络上的资源了呢？</p><p>还不行，DNS 和 IP 地址只是标记了互联网上的主机，但主机上有那么多文本、图片、页面，到底要找哪一个呢？</p><p>就像小明管理了一大堆文档，你怎么告诉他是哪个呢？所以就出现了 URI（Uniform Resource Identifier），中文名称是 统一资源标识符，使用它就能够唯一地标记互联网上资源。</p><p>URI 另一个更常用的表现形式是 URL（Uniform Resource Locator）， 统一资源定位符，也就是我们俗称的「网址」，它实际上是 URI 的一个子集，不过因为这两者几乎是相同的，差异不大，所以通常不会做严格的区分。</p><p>URI 主要有三个基本的部分构成：</p>',11),s=e("li",null,"协议名：即访问该资源应当使用的协议，在这里是「http」",-1),l={href:"http://nginx.org",target:"_blank",rel:"noopener noreferrer"},S=e("li",null,"路径：即资源在主机上的位置，使用「/」分隔多级目录，在这里是「/en/download.html」",-1),H=a('<p>还是用打电话来做比喻，你通过电话簿找到了小明，让他把昨天做好的宣传文案快递过来。那么这个过程中你就完成了一次 URI 资源访问，「小明」就是「主机名」，「昨天做好的宣传文案」就是「路径」，而「快递」，就是你要访问这个资源的「协议名」。</p><h3 id="https" tabindex="-1"><a class="header-anchor" href="#https" aria-hidden="true">#</a> HTTPS</h3><p>HTTPS 全称是「HTTP over SSL/TLS」，也就是运行在 SSL/TLS 协议上的 HTTP。</p><p>这里是 SSL/TLS，而不是 TCP/IP，它是一个负责加密通信的安全协议，建立在 TCP/IP 之上，所以也是个可靠的传输协议，可以被用作 HTTP 的下层。</p><p>因为 HTTPS 相当于「HTTP+SSL/TLS+TCP/IP」，其中的「HTTP」和「TCP/IP」我们都已经明白了，只要再了解一下 SSL/TLS，HTTPS 也就能够轻松掌握。</p><p>SSL 的全称是「Secure Socket Layer」，由网景公司发明，当发展到 3.0 时被标准化，改名为 TLS，即「Transport Layer Security」，但由于历史的原因还是有很多人称之为 SSL/TLS，或者直接简称为 SSL。</p><p>SSL 使用了许多密码学最先进的研究成果，综合了对称加密、非对称加密、摘要算法、数字签名、数字证书等技术，能够在不安全的环境中为通信的双方创建出一个秘密的、安全的传输通道，为 HTTP 套上一副坚固的盔甲。</p><p>你可以在今后上网时留心看一下浏览器地址栏，如果有一个小锁头标志，那就表明网站启用了安全的 HTTPS 协议，而 URI 里的协议名，也从「http」变成了「https」。</p><h3 id="代理" tabindex="-1"><a class="header-anchor" href="#代理" aria-hidden="true">#</a> 代理</h3><p>代理（Proxy）是 HTTP 协议中请求方和应答方中间的一个环节，作为「中转站」，既可以转发客户端的请求，也可以转发服务器的应答。代理有很多的种类，常见的有：</p><ul><li>匿名代理：完全「隐匿」了被代理的机器，外界看到的只是代理服务器</li><li>透明代理：顾名思义，它在传输过程中是「透明开放」的，外界既知道代理，也知道客户端</li><li>正向代理：靠近客户端，代表客户端向服务器发送请求</li><li>反向代理：靠近服务器端，代表服务器响应客户端的请求</li></ul><p>CDN实际上就是一种代理，它代替源站服务器响应客户端的请求，通常扮演着透明代理和反向代理的角色。</p><p>由于代理在传输过程中插入了一个「中间层」，所以可以在这个环节做很多有意思的事情，比如：</p><ul><li>负载均衡：把访问请求均匀分散到多台机器，实现访问集群化</li><li>内容缓存：暂存上下行的数据，减轻后端的压力</li><li>安全防护：隐匿 IP, 使用 WAF 等工具抵御网络攻击，保护被代理的机器</li><li>数据处理：提供压缩、加密等额外的功能</li></ul><p>关于 HTTP 的代理还有一个特殊的「代理协议」（proxy protocol），它由知名的代理软件 HAProxy 制订，但并不是 RFC 标准。</p>',15);function b(u,I){const r=o("ExternalLinkIcon");return T(),n("div",null,[d,e("p",null,[p("于是「域名系统」（Domain Name System）出现了，用有意义的名字来作为 IP 地址的等价替代。设想一下，你是愿意记「95.211.80.227」这样枯燥的数字，还是「"),e("a",P,[p("nginx.org"),i(r)]),p("」这样的词组呢？")]),c,e("ul",null,[s,e("li",null,[p("主机名：即互联网上主机的标记，可以是域名或 IP 地址，在这里是「"),e("a",l,[p("nginx.org"),i(r)]),p("」")]),S]),H])}const m=t(h,[["render",b],["__file","03-HTTP世界全览：与HTTP相关的各种概念.html.vue"]]);export{m as default};
