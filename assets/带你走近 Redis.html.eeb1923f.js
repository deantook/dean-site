import{_ as t}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as e,c as l,d as s}from"./app.987485ec.js";const a={},d=s('<h1 id="带你走进-redis" tabindex="-1"><a class="header-anchor" href="#带你走进-redis" aria-hidden="true">#</a> 带你走进 Redis</h1><blockquote><p>作者：bobobliu，腾讯 CSIG 后台开发工程师</p></blockquote><h2 id="什么是-redis" tabindex="-1"><a class="header-anchor" href="#什么是-redis" aria-hidden="true">#</a> 什么是 Redis</h2><p>Redis 是一个开源、基于内存、使用 C 语言编写的 key-value 数据库，并提供了多种语言的 API。它的数据结构十分丰富，基础数据类型包括：string（字符串）、list（列表，双向链表）、hash（散列，键值对集合）、set（集合，不重复）和 sorted set（有序集合）。主要可以用于数据库、缓存、分布式锁、消息队列等...</p><p>以上的数据类型是 Redis 键值的数据类型，其实就是数据的保存形式，但是数据类型的底层实现是最重要的，底层的数据结构主要分为 6 种，分别是简单动态字符串、双向链表、压缩链表、哈希表、跳表和整数数组。各个数据类型和底层结构的对应关系如下：</p><p>数据类型和底层结构的对应关系</p><table><thead><tr><th style="text-align:left;">string</th><th style="text-align:left;">list</th><th style="text-align:left;">hash</th><th style="text-align:left;">set</th><th style="text-align:left;">sorted set</th></tr></thead><tbody><tr><td style="text-align:left;">简单动态字符串</td><td style="text-align:left;">双向链表、压缩链表</td><td style="text-align:left;">压缩链表、哈希表</td><td style="text-align:left;">压缩链表、整数数组</td><td style="text-align:left;">压缩链表、跳表</td></tr></tbody></table><p>底层实现的时间复杂度</p><table><thead><tr><th style="text-align:left;">跳表</th><th style="text-align:left;">双向链表</th><th style="text-align:left;">压缩链表</th><th style="text-align:left;">哈希表</th><th style="text-align:left;">整数数组</th></tr></thead><tbody><tr><td style="text-align:left;">O(logN)</td><td style="text-align:left;">O(N)</td><td style="text-align:left;">O(N)</td><td style="text-align:left;">O(1)</td><td style="text-align:left;">O(N)</td></tr></tbody></table><p>可以看出除了 string 类型的底层实现只有一种数据结构，其他四种均有两种底层实现，这四种类型为集合类型，其中一个键对应了一个集合的数据；</p><h2 id="redis-键值是如何保存的呢" tabindex="-1"><a class="header-anchor" href="#redis-键值是如何保存的呢" aria-hidden="true">#</a> Redis 键值是如何保存的呢？</h2><p>Redis 为了快速访问键值对，采用了<strong>哈希表</strong>来保存所有的键值对，一个哈希表对应了多个<strong>哈希桶</strong>，所谓的哈希桶是指哈希表数组中的每一个元素，当然哈希表中保存的不是值本身，是指向值的指针，如下图。</p><p>其中哈希桶中的 entry 元素中保存了<em>key 和</em>value 指针，分别指向了实际的键和值。通过 Redis 可以在 O(1)的时间内找到键值对，只需要计算 key 的哈希值就可以定位位置，但从下图可以看出，在 4 号位置出现了冲突，两个 key 映射到了同一个位置，这就产生了哈希冲突，会导致哈希表的操作变慢。虽然 Redis 通过链式冲突解决该问题，但如果数据持续增多，产生的哈希冲突也会越来越多，会加重 Redis 的查询时间；</p><p><img src="http://dean-imgsubmit.oss-cn-beijing.aliyuncs.com/imm/640.png" alt="图片" loading="lazy"></p>',14),i=[d];function n(r,h){return e(),l("div",null,i)}const f=t(a,[["render",n],["__file","带你走近 Redis.html.vue"]]);export{f as default};
